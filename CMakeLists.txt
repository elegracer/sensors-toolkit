cmake_minimum_required(VERSION 3.11 FATAL_ERROR)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")
project(sensors-toolkit)

include(CMakeDependentOption)

if(NOT TARGET options::cpp17)
    add_library(options::cpp17 INTERFACE IMPORTED GLOBAL)
    target_compile_features(options::cpp17 INTERFACE cxx_std_17)
endif()

if(NOT TARGET options::modern-cpp)
    if(TARGET options::cpp17)
        add_library(options::modern-cpp INTERFACE IMPORTED GLOBAL)
        target_link_libraries(options::modern-cpp INTERFACE options::cpp17)
    elseif(TARGET options::cpp14)
        add_library(options::modern-cpp INTERFACE IMPORTED GLOBAL)
        target_link_libraries(options::modern-cpp INTERFACE options::cpp14)
    elseif(TARGET options::cpp11)
        add_library(options::modern-cpp INTERFACE IMPORTED GLOBAL)
        target_link_libraries(options::modern-cpp INTERFACE options::cpp11)
    else()
        message(FATAL_ERROR "options::modern-cpp expects options::cpp11 or above.")
    endif()
endif()

if(NOT TARGET depends::opencv)
    find_package(OpenCV REQUIRED)
    add_library(depends::opencv INTERFACE IMPORTED GLOBAL)
    target_include_directories(depends::opencv INTERFACE ${OpenCV_INCLUDE_DIRS})
    target_link_libraries(depends::opencv INTERFACE ${OpenCV_LIBS})
endif()

cmake_dependent_option(SENSORS_BUILD_PC_APP "..." ON "NOT IOS" OFF)
cmake_dependent_option(SENSORS_BUILD_IOS_APP "..." ON "IOS" OFF)

add_subdirectory(libsensors)

if(SENSORS_BUILD_PC_APP)
  add_subdirectory(sensors-pc)
endif()

if(SENSORS_BUILD_IOS_APP)
  add_subdirectory(sensors-ios)
endif()
